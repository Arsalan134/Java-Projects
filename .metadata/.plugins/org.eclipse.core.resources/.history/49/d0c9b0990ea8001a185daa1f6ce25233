import akka.actor.typed.ActorRef;
import akka.actor.typed.Behavior;
import akka.actor.typed.javadsl.*;

public class Main extends AbstractBehavior<Main.PrepareFoodFor> {

	public static class PrepareFoodFor {
		public final String name;

		public PrepareFoodFor(String name) {
			this.name = name;
		}
	}

	private final ActorRef<Restaurant.PrepareFood> food;

	public static Behavior<PrepareFoodFor> create() {
		return Behaviors.setup(Main::new);
	}

	private Main(ActorContext<PrepareFoodFor> context) {
		super(context);
		// #create-actors
		food = context.spawn(Restaurant.create(), "food");
		// #create-actors
	}

	@Override
	public Receive<PrepareFoodFor> createReceive() {
		return newReceiveBuilder().onMessage(PrepareFoodFor.class, this::onSayHello).build();
	}

	private Behavior<PrepareFoodFor> onSayHello(PrepareFoodFor command) {
		// #create-actors
		ActorRef<Restaurant.PrerearedFood> replyTo = getContext().spawn(RestaurantBot.create(3), command.name);
		food.tell(new Restaurant.PrepareFood(command.name, replyTo));
		// #create-actors
		return this;
	}
}
